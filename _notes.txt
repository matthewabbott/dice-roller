TODOs:

- smoothly transition camera on highlight jump
- have camera follow dice on initial roll
- make dice fling a bit more on initial roll

- rolling dice in chat now records the roll as anonymous instead of as the registered user
- possible bug: when dice clip into eachother, they just freeze forever?
- physics validation 'tests' should probably get ripped out and readjusted
- turn hardcoded colors in canvas related stuff into constants
- different kinds of dice (chat command vs. canvas UI)
- credit to https://github.com/byWulf/threejs-dice. Package doesn't work for current ver three.js, but I used his vertex definitions and dicemanager structure.


- will also have to broadcast all this info to everyone on the web-page so THEY can see the dice rolling too
- and REALLY I'd like for multiple people to be rolling dice at the same time, having their dice bounce off eachother and stuff
- also wanna move the dice canvas front and center
  - nonstandard dice roll as d6, perhaps? 
    - same code should also handle rolling too many dice (which will roll as a single die that produces a big result)


- remove speed limit for dice rolling (just mediate with modest air drag)
- fix seams in the d10 faces
- have color change system message show TO and FROM colors
- fix anonymous user registry, or at least codify current behavior as intentional
- initialized user color sometimes is different from ui listed color (might be a session persistence thing?)


RESOLVED:

Minor snag, pointer events blocked to background threejs canvas
- After moving canvas to background, couldn't click on it.
- Tried to fix with `pointer-events-none` Tailwind class to PanelGroup container
- react-resizable-panels library styles have higher specificity than that tailwind class
- Solution: Wrapper div with inline `style={{ pointerEvents: 'none' }}` (higher specificity)

Minor snag, roll commands were rolling as 'Anonymous'
- rollDice mutation had a `user` parameter in its graphql schema and resolver
- regular chat messages used context.getUsername()
- rolls were passing a a hardcoded `user` parameter (always anonymous)
- changed roll logic to use the context.getUsername(), and remove `user` from schema and resolver

Minor snag, grid texture tiling boundary issue
- Original texture was 1024x1024 with 64px grid squares repeated 10 times
- but textures were overlapping, 
- so the right edge (and major grid line) of one texture would be one grid square past the left edge of the next
- fix: actually make the textures tileable (320px by 320px, tiling 5x into 1600px coverage)
  - Draw major gridlines ON edges. 

Minor snag, physics body sleeping issue
- Dice would freeze when they come to a full stop
- Cannon.js behavior that puts them to 'sleep' and requires they explicitly be 'woken up'
- Also at the end of a throw, to show the die face, we'd rotate the die to show the value...
  - except it'd restore the vectors from the start of the throw, flinging the die again.

Major snag, username tracking synchronization bug:
- Data structures `activeUsernames`, `sessionToUsername`, and `usernameToSession` were getting out of sync
- Caused "ghost" usernames: registered, but orphaned from disconnected sessions
- Root cause: incomplete cleanup during username changes and WebSocket disconnects
- Fixed by adding removeUsernameSafely() helper to enforce atomic updates
- Also added orphaned username detection for cleanup on improper disconnections
- Also was seeing an error in onDisconnect when WebSocket context was unavaiable. Added fallback cleanup.
- TODO: invariant based setup of a contract between `activeUsernames`, `sessionToUsername`, `usernameToSession`. (Or just better structuring)

Major snag,
- HOW do you kill sessions after a browser tab closes? After a browser window closes?

Minor snag,
- Add error handling, but useMutation hook's onError callback never gets reached
- Seems like the browser was holding back the request in a `Stalled` state if the server was down
- Apollo never interpreted that as an error, so we'd just be locked 
- Solution: manually implement timeouts

Major snag, http requests to websocket, fixed by e48bc33:
- Needed to change server.ts to explicitly define a websocket server to handle requests against `ws://localhost:4000/dice/graphql`
- Apollo documentation at https://www.apollographql.com/docs/apollo-server/data/subscriptions was out of date
- Documentation shows `import { useServer } from 'graphql-ws/lib/use/ws';`
- Correct import in graphql v6 is `import { useServer } from 'graphql-ws/use/ws';` (per https://the-guild.dev/graphql/ws/recipes)
- Apollo has the latest graphql as a dependency. So doc examples just don't actually work.
- Imagine having to go check the graphql documentation. This was actually me. I had to. All the king's AIs and all the king's client documentation couldn't put my imports back together again.

MAJOR snag: chat<-->dice highlighting Not Working (52a39d1)
- Chat messages could not highlight canvas dice, and clicking canvas dice did not highlight chat messages. 
  - Remote dice (dice generated by chat commands) were completely unresponsive to clicks.
- Root Cause: Missing `canvasId` prop in `RemoteDiceRenderer`
  - Remote dice didn't have a UUID to match with activities in the highlighting system.
  - Kept trying to map this in very stupid ways that did not work (bespoke ID mapping systems, eg trying to have like, a dictionary mapping UUID to canvas ID)
  - Eventually added missing `canvasId={diceId}` prop in `RemoteDiceRenderer.tsx`
    - Literally just use the UUIDs generated by RollProcessor and attach to canvas dice
- AI friend read through the whole control flow (UUID genned in RollProcessor → server → GraphQL → client → components)
  - Server generates UUIDs for dice in `RollProcessor`
  - Two parallel client streams: canvas events (spawn dice) + activities (chat messages)
  - Both use same UUIDs: `remoteDice` Map keys = `activity.roll.canvasData.dice[].canvasId`
  - `useHighlighting` matches UUIDs between systems for cross-highlighting
  - Global state synchronizes highlighting across `DiceCanvas` and `ActivityFeed`